{% block content %} 
    <script src="/static/js/libs/socket.io.min.js"></script>
    <script src="/static/js/libs/crypto-js.js"></script>
    <script>
        const socket = io();

        const AES_KEY = CryptoJS.enc.Utf8.parse('Sixteen byte key');
        const AES_IV = CryptoJS.enc.Utf8.parse('sixteen bytes IV');

        // Function to encrypt a message using AES
        function encryptMessage(message) {
            const encrypted = CryptoJS.AES.encrypt(message, AES_KEY, { iv: AES_IV });
            return encrypted.toString();
        }

        // Function to decrypt a message using AES
        function decryptMessage(encryptedMessage) {
            const decrypted = CryptoJS.AES.decrypt(encryptedMessage, AES_KEY, { iv: AES_IV });
            return decrypted.toString(CryptoJS.enc.Utf8);
        }

        socket.on("incoming", function(data), (msg, color="black") => {
            const decryptedMessage = decryptMessage(data.message);
            print("decrypted: ", decryptedMessage);
        });
        
        socket.on("error", function(errorMessage), (msg, color="black") => {
            alert(errorMessage);
        });

        function send(message, recipient, type) {
            const encryptedMessage = encryptMessage(message)
            print("Sending message");
            socket.emit(type, JSON.stringify({sender: username, recipient: recipient, message: encryptedMessage}));  
        } 

        function send_friend_request_socket(recipient) {
            send("", recipient, 'send_friend_request');
        }

        function send_friend_request_response_socket(recipient,status) {
            send(status, recipient, 'send_friend_request_response');
        }
        
    </script>
{% endblock %}