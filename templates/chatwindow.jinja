{% include 'keyexchange.jinja' %}

{% block content %} 

<style>
    #chat_window_container {
        width: 100%;
        height: 600px;
        border:1px solid black;
        display: flex;
        flex-direction: column;
    }

    #chat_window_container h3 {
        text-align: center;
    }

    #top_view {
        background-color: rgb(222, 222, 222);
        border:1px solid black;
        flex: 3;
        max-height: 100%;
        overflow: auto;
    }
    #bottom_view {
        flex: 1;
    }
    #input_controls {
        width: 850px;
        height: 100px;
        padding-top: 15px;
        margin: auto;
    }
    #paragraph_input {
        width: 100%;
        height: 100%;
    }
    #submit_message {
        margin-top: 7px;
        float: right;
    }
    #message_container {
        width: 95%;
        margin: auto;
        height: 100%;
        padding-top: 10px;
    }
    #message_container p {
        padding: 0px;
        margin: 0px;
    }
    .message_container_content {
        background-color: rgb(255, 255, 255);
        padding: 10px;
        margin-top: 5px;
    }
</style>

<script>
    const AES_KEY = CryptoJS.enc.Utf8.parse(randomGenerator.next());
    const AES_IV = CryptoJS.enc.Utf8.parse(randomGenerator.next());

    //I would prefer to have relay and in-coming functions together. But javascript doesn't let me use functions before they have a definition. :[
    function relay(message,recipient) {
        send(message,recipient,'relay');
    }

    // Function to encrypt a message using AES
    // TODO: make functions to take in keys as parameter
    function encryptMessage(message) {
        const encrypted = CryptoJS.AES.encrypt(message, AES_KEY, { iv: AES_IV });
        return encrypted.toString();
    }

    // Function to decrypt a message using AES
    function decryptMessage(encryptedMessage) {
        const decrypted = CryptoJS.AES.decrypt(encryptedMessage, AES_KEY, { iv: AES_IV });
        return decrypted.toString(CryptoJS.enc.Utf8);
    }
</script>

<script>
    function append_message_content(message,user) {///Just places the messages on screen. 
        const container = document.getElementById('message_container'); // Ensure this is the correct ID
        let entryHtml = `
        <div class="message_container_content">
                <p>${user}</p>
                <p>${message}</p>
            </div>`;
        container.insertAdjacentHTML('beforeend', entryHtml);
    }

    function handle_send() { //Gets the the user input. And feeds it into append message content. 
        const user_input = document.getElementById("paragraph_input"); 
        if (connected_user != null) {
            let message_content = user_input.value;
            user_input.value = "";

            append_message_content(message_content,username);

            message_content = encryptMessage(message_content);
            relay(craft_message_communication(message_content),connected_user);            
        } else {
            alert("There is no user connected");
        }
    }

    function clear_chat() {
        document.getElementById("message_container").innerHTML = "";
    }

    async function open_chat(user_name) { //Working progress.
        user_name = user_name.name; //We've passed in a HTML element, html elements have attributes. E.g. <div id="foo" name="bar"> we access these attributes like if they were OOP. 
        await init_connection(user_name);

        if (user_name in known_keys) {
            clear_chat();
            document.getElementById("connected_user_text").innerText = user_name;
            get_message_history(user_name);            
        } else {
            alert("failed key exchange");
        }
    }
    
</script>

<script>
    //Handles outgoing messages. 
    socket.on("incoming", (msg, color="black") => {
        receiver(msg);
    })

    socket.on("message_history", (msg, color="black") => {
        var message_history_obj = JSON.parse(msg);
        for (var i = 0; i < message_history_obj['messages'].length; i++) {
            var specific_message_obj = JSON.parse(message_history_obj['messages'][i]);
            append_message_content(specific_message_obj['message'],specific_message_obj['user']);
        }
        console.log("chat history",message_history_obj);
    })
</script>

<div id="chat_window_container">
    <h3>Chatting with: <span id="connected_user_text">*no connection*</span></h3>
    <div id="top_view">
        
        <div id="message_container">

        </div>

    </div>
    <div id="bottom_view">

        <div id="input_controls">
            <textarea id="paragraph_input" name="paragraph_input"></textarea>
            <input id="submit_message" type="submit" onclick="handle_send()" value="send_request">
        </div>

    </div>
</div>
{% endblock %}